version: 2.1

commands:
  check-if-tag-exists-in-default-branch:
    parameters:
      default_branch:
        type: string
        default: "master"
    steps:
      - checkout
      - run:
          name: Check if tag exists in default branch
          command: | 
            if [[ $(git tag -l $CIRCLE_TAG --merged origin/<< parameters.default_branch >>) == $CIRCLE_TAG ]]; then
              echo "The tag $CIRCLE_TAG exists in the origin/<< parameters.default_branch >> branch. The deploy will be done."
            else
              echo "The tag $CIRCLE_TAG does not exist in the origin/<< parameters.default_branch >> branch. The deploy will not be done."
              circleci-agent step halt 
            fi
  
jobs:
  build:
    parameters:
      output:
        type: string
    docker:
      - image: cimg/base:2020.01
    resource_class: small
    steps:
      - checkout
      - run: echo "<< parameters.output >>" 
  calculate-semver:
    docker:
      - image: circleci/node:14
    resource_class: small
    parameters:
      default_branch:
        type: string
        default: "master"
    steps:
      - checkout
      - run:
          name: Create package.json
          command: |
            FILE=package.json
            if [ -f "$FILE" ]; then
              echo "$FILE exists. Will skip it, please add @semantic-release/commit-analyzer the plugin to calculate semver."
            else 
              echo "The file $FILE does not exist, will create it."
              cat >$FILE \<<EOL
                {
                  "dependencies": {
                    "conventional-changelog-conventionalcommits": "4.5.0"
                  },
                  "release": {
                    "plugins": [
                      ["@semantic-release/commit-analyzer", {
                        "preset": "conventionalcommits",
                        "releaseRules": [
                            {"type": 'feat!', "release": "major"},
                            {"type": "docs", "release": "patch"},
                            {"type": "feat", "release": "minor"},
                            {"type": "fix", "release": "patch"},
                            {"type": "docs", "release": "patch"},
                            {"type": "style", "release": "patch"},
                            {"type": "refactor", "release": "patch"},
                            {"type": "perf", "release": "patch"},
                            {"type": "test", "release": "patch"},
                            {"type": "ci", "release": "patch"},
                            {"type": "build", "release": "patch"}
                        ]
                        }],
                      ["@semantic-release/release-notes-generator",{
                        "preset": "conventionalcommits",
                        "presetConfig": {
                          "types": [
                              {"type": "feat", "section": "Features"},
                              {"type": "fix", "section": "Bug Fixes"},
                              {"type": "chore", "section": "Others"},
                              {"type": "docs", "section": "Documentation"},
                              {"type": "style", "section": "Others"},
                              {"type": "refactor", "section": "Others"},
                              {"type": "perf", "section": "Performance Improvements"},
                              {"type": "test", "section": "Others"},
                              {"type": "ci", "section": "Others"},
                              {"type": "build", "section": "Others"}
                          ]
                        }
                      }],
                      "@semantic-release/github"
                    ],
                    "branch": "<< parameters.default_branch >>"
                  }
                }
            EOL
            fi
      #- run: npm i conventional-changelog-conventionalcommits
      - run: npm install
      - run: 
          name: Calculate semver 
          command: npx semantic-release 
workflows:
  version: 2
  untagged-build:
    jobs:
      - build:
          filters:
            branches:
              only: master
          output: "i don't run by tag"
      - calculate-semver
  tagged-build:
    #when: << pipeline.parameters.version >>
    jobs:
      - build:
          pre-steps:
            - check-if-tag-exists-in-default-branch:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          output: "my tag is $CIRCLE_TAG" # run the `echo` command

parameters:
  version:
    type: string
    default: ""
